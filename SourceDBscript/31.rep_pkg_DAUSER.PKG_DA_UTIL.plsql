-- DDL Script was generated by Orange for ORACLE

CREATE OR REPLACE PACKAGE DAUSER.PKG_DA_UTIL AS
/*****************************************************************************************************
    NAME:     PKG_DA_UTILITY
    PURPOSE:  DB 개발팀 유틸리티
    REVISIONS:
    Description:
        1.	배포 점검 script
        2.  ogg table list

    VER        DATE        AUTHOR               DESCRIPTION
    ---------  ----------  -------------------  --------------------------------
    0.1		  2017.09.14  노영삼			    1. created this package.
    0.2       2019.02.08  노영삼                1. Ogg Table List (File instace : BIDB06, MAINDB4)
    0.3       2019.02.14                        1. add DA_SQLAREA
    0.3       2019.02.14                        2. add DA_Objects
    0.3       2019.11.21                        1. add DA_AWR_SQLSTAT
    0.5       2020.01.07  노영삼                1. add DA_SEGMENTS


 ** PROCEDURE SP_DA_DATA_SYNC 은 MAINDB4 , BIDB6 에서만 실행
******************************************************************************************************/

PROCEDURE SP_DA_STAT_MNG (
    V_instance_nm   IN  VARCHAR2,
    V_stat_nm   IN  VARCHAR2,
    V_CLCT_RSLT_CD  IN VARCHAR2,
    V_TRT_CNT     IN NUMBER DEFAULT 0,
    V_TRT_CONT     IN VARCHAR2 DEFAULT '',
    V_TOTZ_DATE   IN  VARCHAR2 DEFAULT TO_CHAR(SYSDATE, 'YYYYMMDD'),
    V_PART_CD   IN  VARCHAR2 DEFAULT TO_CHAR(SYSDATE, 'DD'),
    V_SYSDATE   IN  DATE DEFAULT SYSDATE
);

PROCEDURE SP_DA_DATA_SYNC;
PROCEDURE SP_DA_SQLAREA;
PROCEDURE SP_DA_SQL_FULLTEXT;
PROCEDURE SP_DA_OBJECTS;
PROCEDURE SP_DA_SEGMENTS;
PROCEDURE SP_DA_AWR_SQLSTAT;
PROCEDURE SP_DA_TAB_MODIF(P_CLCT_DY IN VARCHAR2 default TO_CHAR(SYSDATE -1, 'YYYYMMDD') );

END PKG_DA_UTIL;
/


CREATE OR REPLACE PACKAGE BODY DAUSER.PKG_DA_UTIL AS
/*****************************************************************************************************
    NAME:     PKG_DA_UTILITY
    PURPOSE:  DB 개발팀 유틸리티
    REVISIONS:
    Description:
        1.	배포 점검 script
        2.  ogg table list

    VER        DATE        AUTHOR               DESCRIPTION
    ---------  ----------  -------------------  --------------------------------
    0.1		  2017.09.14  노영삼			    1. created this package.
    0.2       2019.02.08  노영삼                1. Ogg Table List (File instace : BIDB06, MAINDB4)
    0.3       2019.02.14                        1. add DA_SQLAREA
    0.3       2019.02.14                        2. add DA_Objects
    0.3       2019.11.21  천필수                1. add DA_AWR_SQLSTAT
    0.4       2019.12.21  천필수                1. add DA_AWR_SQLSTAT
    0.5       2020.01.07  노영삼                1. add DA_SEGMENTS

 ** PROCEDURE SP_DA_DATA_SYNC 은 MAINDB4 , BIDB6 에서만 실행
******************************************************************************************************/

PROCEDURE SP_DA_STAT_MNG (
    V_instance_nm   IN  VARCHAR2,
    V_stat_nm   IN  VARCHAR2,
    V_CLCT_RSLT_CD  IN VARCHAR2,
    V_TRT_CNT     IN NUMBER DEFAULT 0,
    V_TRT_CONT     IN VARCHAR2 DEFAULT '',
    V_TOTZ_DATE   IN  VARCHAR2 DEFAULT TO_CHAR(SYSDATE, 'YYYYMMDD'),
    V_PART_CD   IN  VARCHAR2 DEFAULT TO_CHAR(SYSDATE, 'DD'),
    V_SYSDATE   IN  DATE DEFAULT SYSDATE
)
IS

BEGIN

        Merge into DAUSER.DA_STAT_MNG@PMETA A
        USING dual
        on (A.DB_NM = v_instance_nm
            and A.STAT_NM = v_stat_nm
            and A.CLCT_DY = v_TOTZ_DATE)
        when matched then
        update set
            A.CLCT_RSLT_CD  = V_CLCT_RSLT_CD
            , A.PART_CD  = v_PART_CD
            , update_dt = SYSDATE
            , TRT_CNT = V_TRT_CNT
            , TRT_CONT = V_TRT_CONT
        When not matched then
        Insert (DB_NM, STAT_NM, CLCT_DY, CLCT_RSLT_CD, PART_CD, CREATE_DT, UPDATE_DT, TRT_CNT, TRT_CONT )
        values (v_instance_nm, v_stat_nm, v_TOTZ_DATE, V_CLCT_RSLT_CD, v_PART_CD, V_SYSDATE, SYSDATE, V_TRT_CNT, V_TRT_CONT);

        Commit;

EXCEPTION
	WHEN OTHERS THEN
		ROLLBACK;
        DBMS_OUTPUT.PUT_LINE('sqlCode:'||SQLCODE||' / sqlerrm:'||SQLERRM);

		DBMS_APPLICATION_INFO.SET_MODULE('','');
END SP_DA_STAT_MNG;

PROCEDURE SP_DA_DATA_SYNC
--    MAINDB4 , BIDB6 에서만 실행

IS
    v_direc_nm varchar2(100) := 'GGS_DIR_PRM';
    v_direc_path varchar2(1000) := '';

    v_file_content UTL_FILE.FILE_TYPE;

    v_line_num number := 1;
    v_line varchar2(4000) := '';

    v_TOTZ_DATE         VARCHAR2(8) := TO_CHAR(SYSDATE, 'YYYYMMDD');
    v_PART_CD           VARCHAR2(8) := TO_CHAR(SYSDATE, 'DD');
    V_SYSDATE           DATE := SYSDATE;
    V_TRT_CNT           NUMBER := 0;

    v_instance_nm varchar2(100);

    v_chk varchar2(5) := 'N';

    v_stat_nm varchar2(64) := 'DA_SYNC_TABLES';

BEGIN

    Select DIRECTORY_PATH
    Into v_direc_path
    From dba_directories where directory_name = v_direc_nm;

    Select name
    Into v_instance_nm
    From SYS.GV_$DATABASE where rownum = 1;

    EXECUTE IMMEDIATE 'Delete From DAUSER.DA_OGG_FILE_SOURCE';

    for data in (select file_Nm from DAUSER.DA_OGG_PRM_FILE)
    loop

        v_line_num := 0;
        dbms_output.put_line('== '|| v_direc_path ||' / ' || data.file_Nm || ' ==');

        v_file_content := UTL_FILE.FOPEN(v_direc_nm, data.file_Nm, 'R');

        IF UTL_FILE.IS_OPEN(v_file_content) THEN

            LOOP
            BEGIN

                UTL_FILE.GET_LINE(v_file_content, v_line);

--                DBMS_OUTPUT.PUT_LINE (v_line_num || CHR(9) || v_line);
                v_line_num := v_line_num+1;

                Insert into DAUSER.DA_OGG_FILE_SOURCE(FILE_NM, LINE, TEXT)
                VALUES(data.file_Nm, v_line_num, v_line);

                EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                    EXIT;
                END;

            END LOOP;

        COMMIT;
        UTL_FILE.FCLOSE(v_file_content);
        END IF;

    end loop;

    Select decode(count(*), 0 , 'N', 'Y') into v_chk
    From DAUSER.DA_OGG_FILE_SOURCE where rownum <= 1;

    if (v_chk = 'Y') then

        DELETE DAUSER.DA_SYNC_TABLES@PMETA WHERE SRC_DB = v_instance_nm;
        COMMIT;

        Insert into DAUSER.DA_SYNC_TABLES@PMETA
        SELECT
        SRC_DB
        , TABLE_OWNER
        , TABLE_NM
        , TRGT_DB
        , UPDATE_DT
        FROM (
        with target_db as (
            Select
                FILE_NM
                , regexp_substr(trim(upper(text)), '^RMTHOST([[:space:]]+)([0-9.^;]+)',1, 1, null, 2) host_IP
            From DAUSER.DA_OGG_FILE_SOURCE
            where 1=1
            and regexp_like (RTRIM(text),  '^RMTHOST([[:space:]]+)([0-9.^;]+)')
        ),
        table_list as (
            select
                FILE_NM
            , regexp_substr(replace(trim(upper(text)), ';' , ''), '[^[:space:]]+',1,2) Table_Nm
            From DAUSER.DA_OGG_FILE_SOURCE
            where 1=1
            and regexp_like (RTRIM(text),  '^TABLE([[:space:]]+)')
        )
        select
            v_instance_nm SRC_DB
            , regexp_substr(trim(upper(t_list.table_nm)), '[^.]+',1,1) TABLE_OWNER
            , regexp_substr(trim(upper(t_list.table_nm)), '[^.]+',1,2) Table_Nm
            , t_db.host_ip TRGT_DB
            , sysdate UPDATE_DT
        From
        target_db t_db, table_list t_list
        where t_db.file_nm = t_list.file_nm
        )
        ;

        V_TRT_CNT := SQL%ROWCOUNT;

        SP_DA_STAT_MNG(v_instance_nm, v_stat_nm, '01', V_TRT_CNT, 'sqlCode:'||SQLCODE||' / sqlerrm:'||SQLERRM, V_TOTZ_DATE, V_PART_CD, V_SYSDATE);

        Commit;

    END IF;

EXCEPTION
	WHEN OTHERS THEN
		ROLLBACK;
        DBMS_OUTPUT.PUT_LINE('sqlCode:'||SQLCODE||' / sqlerrm:'||SQLERRM);
        SP_DA_STAT_MNG(v_instance_nm, v_stat_nm, '02', V_TRT_CNT, 'sqlCode:'||SQLCODE||' / sqlerrm:'||SQLERRM, V_TOTZ_DATE, V_PART_CD, V_SYSDATE);

		DBMS_APPLICATION_INFO.SET_MODULE('','');
END SP_DA_DATA_SYNC;


PROCEDURE SP_DA_SQLAREA
IS
    V_NAME              CONSTANT VARCHAR2(100)  := 'SP_DA_SQLAREA';

    v_TOTZ_DATE         VARCHAR2(8) := TO_CHAR(SYSDATE, 'YYYYMMDD');
    v_PART_CD           VARCHAR2(8) := TO_CHAR(SYSDATE, 'DD');
    V_SYSDATE           DATE := SYSDATE;
    V_TRT_CNT           NUMBER := 0;

    v_instance_nm varchar2(100);

    v_stat_nm varchar2(64) := 'DA_SQLAREA';

BEGIN

    DBMS_APPLICATION_INFO.SET_MODULE(V_NAME,'start');

    Select name
    Into v_instance_nm
    From SYS.GV_$DATABASE where rownum = 1;

    EXECUTE IMMEDIATE 'Delete From DAUSER.DA_SQLAREA';

    Insert into DAUSER.DA_SQLAREA
    select /*+ parallel(s 8) */
            INST_ID
         , SQL_TEXT
         , SQL_ID
         , SHARABLE_MEM
         , PERSISTENT_MEM
         , RUNTIME_MEM
         , SORTS
         , VERSION_COUNT
         , LOADED_VERSIONS
         , OPEN_VERSIONS
         , USERS_OPENING
         , FETCHES
         , EXECUTIONS
         , PX_SERVERS_EXECUTIONS
         , END_OF_FETCH_COUNT
         , USERS_EXECUTING
         , LOADS
         , FIRST_LOAD_TIME
         , INVALIDATIONS
         , PARSE_CALLS
         , DISK_READS
         , DIRECT_WRITES
         , BUFFER_GETS
         , APPLICATION_WAIT_TIME
         , CONCURRENCY_WAIT_TIME
         , CLUSTER_WAIT_TIME
         , USER_IO_WAIT_TIME
         , PLSQL_EXEC_TIME
         , JAVA_EXEC_TIME
         , ROWS_PROCESSED
         , COMMAND_TYPE
         , OPTIMIZER_MODE
         , OPTIMIZER_COST
         , OPTIMIZER_ENV
         , OPTIMIZER_ENV_HASH_VALUE
         , PARSING_USER_ID
         , PARSING_SCHEMA_ID
         , PARSING_SCHEMA_NAME
         , KEPT_VERSIONS
         , ADDRESS
         , HASH_VALUE
         , OLD_HASH_VALUE
         , PLAN_HASH_VALUE
         , MODULE
         , MODULE_HASH
         , ACTION
         , ACTION_HASH
         , SERIALIZABLE_ABORTS
         , OUTLINE_CATEGORY
         , CPU_TIME
         , ELAPSED_TIME
         , OUTLINE_SID
         , LAST_ACTIVE_CHILD_ADDRESS
         , REMOTE
         , OBJECT_STATUS
         , LITERAL_HASH_VALUE
         , LAST_LOAD_TIME
         , IS_OBSOLETE
         , IS_BIND_SENSITIVE
         , IS_BIND_AWARE
         , CHILD_LATCH
         , SQL_PROFILE
         , SQL_PATCH
         , SQL_PLAN_BASELINE
         , PROGRAM_ID
         , PROGRAM_LINE#
         , EXACT_MATCHING_SIGNATURE
         , FORCE_MATCHING_SIGNATURE
         , LAST_ACTIVE_TIME
         , BIND_DATA
         , TYPECHECK_MEM
         , IO_CELL_OFFLOAD_ELIGIBLE_BYTES
         , IO_INTERCONNECT_BYTES
         , PHYSICAL_READ_REQUESTS
         , PHYSICAL_READ_BYTES
         , PHYSICAL_WRITE_REQUESTS
         , PHYSICAL_WRITE_BYTES
         , OPTIMIZED_PHY_READ_REQUESTS
         , LOCKED_TOTAL
         , PINNED_TOTAL
         , IO_CELL_UNCOMPRESSED_BYTES
         , IO_CELL_OFFLOAD_RETURNED_BYTES
    From gv$sqlarea s
    Where 1=1
    And executions > 1
    and last_active_time > trunc(sysdate - 30)
    and PARSING_SCHEMA_NAME in (select USERNAME From dba_users
        where Account_status = 'OPEN'
        and INITIAL_RSRC_CONSUMER_GROUP NOT IN ('SYS_GROUP')
        and username not in ('OUTLN','DBSNMP','EXFSYS', 'SKCPDBA', 'ZENIUSDB', 'GGT', 'GGS', 'GGSC', 'IGGS' , 'DBADMIN', 'ORANGE', 'SYSMAN')
        and username NOT LIKE 'DEV_%')
        AND   NOT REGEXP_LIKE( nvl( MODULE, '-' ), 'Orange|SQL Developer|SQLGate|Data Pump|TOAD|golden|ERwin|PL.SQL Developer|SQL Loader|sqlplus|SQL.Plus', 'i' )
    ;

    Insert into DAUSER.DA_SQLAREA@PMETA
    SELECT /*+ PARALLEL(S 4) */
           v_TOTZ_DATE CLCT_DY
         , v_PART_CD PART_CD
         , v_instance_nm DB_NM
         , INST_ID
         , SQL_TEXT
         , SQL_ID
         , SHARABLE_MEM
         , PERSISTENT_MEM
         , RUNTIME_MEM
         , SORTS
         , VERSION_COUNT
         , LOADED_VERSIONS
         , OPEN_VERSIONS
         , USERS_OPENING
         , FETCHES
         , EXECUTIONS
         , PX_SERVERS_EXECUTIONS
         , END_OF_FETCH_COUNT
         , USERS_EXECUTING
         , LOADS
         , FIRST_LOAD_TIME
         , INVALIDATIONS
         , PARSE_CALLS
         , DISK_READS
         , DIRECT_WRITES
         , BUFFER_GETS
         , APPLICATION_WAIT_TIME
         , CONCURRENCY_WAIT_TIME
         , CLUSTER_WAIT_TIME
         , USER_IO_WAIT_TIME
         , PLSQL_EXEC_TIME
         , JAVA_EXEC_TIME
         , ROWS_PROCESSED
         , COMMAND_TYPE
         , OPTIMIZER_MODE
         , OPTIMIZER_COST
         , OPTIMIZER_ENV
         , OPTIMIZER_ENV_HASH_VALUE
         , PARSING_USER_ID
         , PARSING_SCHEMA_ID
         , PARSING_SCHEMA_NAME
         , KEPT_VERSIONS
         , ADDRESS
         , HASH_VALUE
         , OLD_HASH_VALUE
         , PLAN_HASH_VALUE
         , MODULE
         , MODULE_HASH
         , ACTION
         , ACTION_HASH
         , SERIALIZABLE_ABORTS
         , OUTLINE_CATEGORY
         , CPU_TIME
         , ELAPSED_TIME
         , OUTLINE_SID
         , LAST_ACTIVE_CHILD_ADDRESS
         , REMOTE
         , OBJECT_STATUS
         , LITERAL_HASH_VALUE
         , LAST_LOAD_TIME
         , IS_OBSOLETE
         , IS_BIND_SENSITIVE
         , IS_BIND_AWARE
         , CHILD_LATCH
         , SQL_PROFILE
         , SQL_PATCH
         , SQL_PLAN_BASELINE
         , PROGRAM_ID
         , PROGRAM_LINE#
         , EXACT_MATCHING_SIGNATURE
         , FORCE_MATCHING_SIGNATURE
         , LAST_ACTIVE_TIME
         , BIND_DATA
         , TYPECHECK_MEM
         , IO_CELL_OFFLOAD_ELIGIBLE_BYTES
         , IO_INTERCONNECT_BYTES
         , PHYSICAL_READ_REQUESTS
         , PHYSICAL_READ_BYTES
         , PHYSICAL_WRITE_REQUESTS
         , PHYSICAL_WRITE_BYTES
         , OPTIMIZED_PHY_READ_REQUESTS
         , LOCKED_TOTAL
         , PINNED_TOTAL
         , IO_CELL_UNCOMPRESSED_BYTES
         , IO_CELL_OFFLOAD_RETURNED_BYTES
    FROM DAUSER.DA_SQLAREA S;

    V_TRT_CNT   := SQL%ROWCOUNT;
    COMMIT;

    SP_DA_STAT_MNG(v_instance_nm, v_stat_nm, '01', V_TRT_CNT, 'sqlCode:'||SQLCODE||' / sqlerrm:'||SQLERRM, V_TOTZ_DATE, V_PART_CD, V_SYSDATE);

    DBMS_APPLICATION_INFO.SET_MODULE('','');

EXCEPTION
	WHEN OTHERS THEN
		ROLLBACK;
        DBMS_OUTPUT.PUT_LINE('sqlCode:'||SQLCODE||' / sqlerrm:'||SQLERRM);
        SP_DA_STAT_MNG(v_instance_nm, v_stat_nm, '02', V_TRT_CNT, 'sqlCode:'||SQLCODE||' / sqlerrm:'||SQLERRM, V_TOTZ_DATE, V_PART_CD, V_SYSDATE);

		DBMS_APPLICATION_INFO.SET_MODULE('','');
END SP_DA_SQLAREA;


PROCEDURE SP_DA_SQL_FULLTEXT
IS
    V_NAME              CONSTANT VARCHAR2(100)  := 'SP_DA_SQL_FULLTEXT';

    v_TOTZ_DATE         VARCHAR2(8) := TO_CHAR(SYSDATE, 'YYYYMMDD');
    v_PART_CD           VARCHAR2(8) := TO_CHAR(SYSDATE, 'DD');
    V_SYSDATE           DATE := SYSDATE;
    V_TRT_CNT           NUMBER := 0;

    v_instance_nm   varchar2(100);
    v_db_id         NUMBER;

    v_stat_nm varchar2(64) := 'DA_SQL_FULLTEXT';

BEGIN

    DBMS_APPLICATION_INFO.SET_MODULE(V_NAME,'start');

    EXECUTE IMMEDIATE 'ALTER SESSION SET OPTIMIZER_MODE=ALL_ROWS';
    EXECUTE IMMEDIATE 'ALTER SESSION SET DB_FILE_MULTIBLOCK_READ_COUNT = 128';
    EXECUTE IMMEDIATE 'ALTER SESSION ENABLE PARALLEL DML';

    Select name
    Into v_instance_nm
    From SYS.GV_$DATABASE where rownum = 1;

    Select db_id
    Into v_db_id
    From DAUSER.DA_DB_LIST@PMETA where db_nm = v_instance_nm;


    Insert into DAUSER.DA_SQL_FULLTEXT A
    SELECT /*+ PARALLEL(S 8) */
        SQL_ID, SQL_FULLTEXT, PROGRAM_ID
    From gv$sqlarea S
    Where 1=1
    and PARSING_SCHEMA_NAME in (select USERNAME From dba_users
                            where Account_status = 'OPEN'
                            and INITIAL_RSRC_CONSUMER_GROUP NOT IN ('SYS_GROUP')
                            and username not in ('OUTLN','DBSNMP','EXFSYS', 'SKCPDBA', 'ZENIUSDB', 'GGT', 'GGS', 'GGSC', 'IGGS' , 'DBADMIN', 'ORANGE', 'SYSMAN', 'DWUSER')
                            and username NOT LIKE 'DEV_%')
    AND   NOT REGEXP_LIKE( nvl( MODULE, '-' ), 'Orange|SQL Developer|SQLGate|Data Pump|TOAD|golden|ERwin|PL.SQL Developer|SQL Loader|sqlplus|SQL.Plus', 'i' )
--    AND NOT EXISTS (SELECT /*+ PARALLEL(C 8) */ 1 FROM DAUSER.DA_SQL_FULLTEXT C WHERE C.SQL_ID = S.SQL_ID)
    ;

    COMMIT;

    Insert /*+ PARALLEL(A 8) */ into DA_SQL_FULLTEXT@PMETA A
    SELECT /*+ PARALLEL(B 8) */
        v_db_id, SQL_ID, SQL_FULLTEXT, PROGRAM_ID
    FROM DAUSER.DA_SQL_FULLTEXT B
    WHERE NOT EXISTS (select /*+ HASH_AJ PARALLEL(C 8) UNNEST */ 1 from DA_SQL_FULLTEXT@PMETA C WHERE C.SQL_ID = B.SQL_ID AND C.db_id = v_db_id) ;

    V_TRT_CNT := SQL%ROWCOUNT;
    COMMIT;

    SP_DA_STAT_MNG(v_instance_nm, v_stat_nm, '01', V_TRT_CNT, 'sqlCode:'||SQLCODE||' / sqlerrm:'||SQLERRM, V_TOTZ_DATE, V_PART_CD, V_SYSDATE);

    DBMS_APPLICATION_INFO.SET_MODULE('','');

EXCEPTION
	WHEN OTHERS THEN
		ROLLBACK;
        DBMS_OUTPUT.PUT_LINE('sqlCode:'||SQLCODE||' / sqlerrm:'||SQLERRM);
        SP_DA_STAT_MNG(v_instance_nm, v_stat_nm, '02', V_TRT_CNT, 'sqlCode:'||SQLCODE||' / sqlerrm:'||SQLERRM, V_TOTZ_DATE, V_PART_CD, V_SYSDATE);

		DBMS_APPLICATION_INFO.SET_MODULE('','');
END SP_DA_SQL_FULLTEXT;

PROCEDURE SP_DA_OBJECTS
IS
    V_NAME              CONSTANT VARCHAR2(100)  := 'SP_DA_OBJECTS';

    v_TOTZ_DATE         VARCHAR2(8) := TO_CHAR(SYSDATE, 'YYYYMMDD');
    v_PART_CD           VARCHAR2(8) := TO_CHAR(SYSDATE, 'DD');
    V_SYSDATE           DATE := SYSDATE;
    V_TRT_CNT           NUMBER := 0;

    v_instance_nm varchar2(100);
    v_db_id     number;

    v_stat_nm varchar2(64) := 'DA_OBJECTS';

BEGIN

    DBMS_APPLICATION_INFO.SET_MODULE(V_NAME,'start');

    Select name
    Into v_instance_nm
    From SYS.GV_$DATABASE where rownum = 1;

    Select db_id
    Into v_db_id
    From DAUSER.DA_DB_LIST@PMETA where db_nm = v_instance_nm;

    EXECUTE IMMEDIATE 'Delete From DAUSER.DA_OBJECTS';
    DELETE DAUSER.DA_OBJECTS@PMETA WHERE db_id = v_db_id;

    COMMIT;

    Insert into DAUSER.DA_OBJECTS
    SELECT
      OWNER
     , OBJECT_NAME
     , OBJECT_ID
     , OBJECT_TYPE
     , CREATED
     , LAST_DDL_TIME
     , STATUS
     , TEMPORARY
    From dba_Objects
    Where 1=1
    and OWNER in (select USERNAME From dba_users
        where Account_status = 'OPEN'
        and INITIAL_RSRC_CONSUMER_GROUP NOT IN ('SYS_GROUP')
        and username not in ('OUTLN','DBSNMP','EXFSYS', 'SKCPDBA', 'ZENIUSDB', 'GGT', 'GGS', 'GGSC', 'IGGS' , 'DBADMIN', 'ORANGE', 'SYSMAN', 'SPLEX', 'SPOT','QUEST', 'QUEST3')
        )
    and object_type in ('TABLE', 'INDEX', 'SEQUENCE', 'PROCEDURE', 'FUNCTION', 'PACKAGE', 'PACKAGE BODY', 'SYNONYM', 'VIEW', 'MATERIALIZED VIEW', 'TRIGGER', 'TYPE')
    And GENERATED = 'N'
    ;

    Insert into DAUSER.DA_OBJECTS@PMETA
    SELECT
--        v_TOTZ_DATE CLCT_DY
--        , v_instance_nm DB_NM
          v_db_id DB_ID
        , OWNER
        , OBJECT_NAME
        , OBJECT_ID
        , OBJECT_TYPE
        , CREATED
        , LAST_DDL_TIME
        , STATUS
        , TEMPORARY
    FROM DAUSER.DA_OBJECTS;

    V_TRT_CNT := SQL%ROWCOUNT;
    COMMIT;

    SP_DA_STAT_MNG(v_instance_nm, v_stat_nm, '01', V_TRT_CNT, 'sqlCode:'||SQLCODE||' / sqlerrm:'||SQLERRM, V_TOTZ_DATE, V_PART_CD, V_SYSDATE);

    DBMS_APPLICATION_INFO.SET_MODULE('','');

EXCEPTION
	WHEN OTHERS THEN
		ROLLBACK;
        DBMS_OUTPUT.PUT_LINE('sqlCode:'||SQLCODE||' / sqlerrm:'||SQLERRM);
        SP_DA_STAT_MNG(v_instance_nm, v_stat_nm, '02', V_TRT_CNT, 'sqlCode:'||SQLCODE||' / sqlerrm:'||SQLERRM, V_TOTZ_DATE, V_PART_CD, V_SYSDATE);

		DBMS_APPLICATION_INFO.SET_MODULE('','');
END SP_DA_OBJECTS;


PROCEDURE SP_DA_SEGMENTS
IS
    V_NAME              CONSTANT VARCHAR2(100)  := 'SP_DA_SEGMENTS';

    v_TOTZ_DATE         VARCHAR2(8) := TO_CHAR(SYSDATE, 'YYYYMMDD');
    v_PART_CD           VARCHAR2(8) := TO_CHAR(SYSDATE, 'DD');
    V_SYSDATE           DATE := SYSDATE;
    V_TRT_CNT           NUMBER := 0;

    v_instance_nm varchar2(100);
    v_db_id     number;

    v_stat_nm varchar2(64) := 'DA_SEGMENTS';

BEGIN

    DBMS_APPLICATION_INFO.SET_MODULE(V_NAME,'start');

    Select name
    Into v_instance_nm
    From SYS.GV_$DATABASE where rownum = 1;

    Select db_id
    Into v_db_id
    From DAUSER.DA_DB_LIST@PMETA where db_nm = v_instance_nm;

    EXECUTE IMMEDIATE 'Delete From DAUSER.DA_SEGMENTS';
    DELETE DAUSER.DA_SEGMENTS@PMETA WHERE db_id = v_db_id AND CLCT_DY = v_TOTZ_DATE;

    COMMIT;

    Insert into DAUSER.DA_SEGMENTS
    SELECT
        OWNER, SEGMENT_NAME, SEGMENT_TYPE, COUNT(*) SEGMENT_CNT, SUM(BYTES ) BYTES
    FROM (
    select
           NVL(u.name, 'SYS')   OWNER,  --OWNER
           o.name   SEGMENT_NAME,  -- SEGMENT_NAME
           o.subname    PARTITION_NAME,   -- PARTITION_NAME
           so.object_type   SEGMENT_TYPE,     -- SEGMENT_TYPE
           s.type#  SEGMENT_TYPE_ID,     -- SEGMENT_TYPE_ID
           NVL(s.blocks, 0) * ts.blocksize  BYTES     -- BYTES
    from sys.user$ u, sys.obj$ o, sys.ts$ ts, sys.sys_objects so, sys.seg$ s
        , sys.file$ f
    where s.file# = so.header_file
      and s.block# = so.header_block
      and s.ts# = so.ts_number
      and s.ts# = ts.ts#
      and o.obj# = so.object_id
      and o.owner# = u.user# (+)
      and s.type# = so.segment_type_id
      and o.type# = so.object_type_id
      and s.ts# = f.ts#
      and s.file# = f.relfile#
      and s.type# in (5   -- Table
    --    , 6 -- Index
    --    , 8 -- Lob
        )
    ) DA_SEGMENTS
    WHERE DA_SEGMENTS.OWNER in (select USERNAME From dba_users
                    where Account_status = 'OPEN'
                    and INITIAL_RSRC_CONSUMER_GROUP NOT IN ('SYS_GROUP')
                    and username not in ('OUTLN','DBSNMP','EXFSYS', 'SKCPDBA', 'ZENIUSDB', 'GGT', 'GGS', 'GGSC', 'IGGS' , 'DBADMIN', 'ORANGE', 'SYSMAN')
                    and username NOT LIKE 'DEV_%')
    AND NOT REGEXP_LIKE( nvl(SEGMENT_NAME, '-' ), 'BACK\$|BAK\$|BIN\$|TEMP\$|TMP\$|RN\$|TEST\$', 'i' )
    Group by OWNER, SEGMENT_NAME, SEGMENT_TYPE
    ;

    COMMIT;

    Insert into DAUSER.DA_SEGMENTS@PMETA
    SELECT
        v_TOTZ_DATE CLCT_DY
        , v_db_id DB_ID
        , OWNER
        , SEGMENT_NAME
        , SEGMENT_TYPE
        , SEGMENT_CNT
        , BYTES
    FROM DAUSER.DA_SEGMENTS;

    V_TRT_CNT := SQL%ROWCOUNT;
    COMMIT;

    SP_DA_STAT_MNG(v_instance_nm, v_stat_nm, '01', V_TRT_CNT, 'sqlCode:'||SQLCODE||' / sqlerrm:'||SQLERRM, V_TOTZ_DATE, V_PART_CD, V_SYSDATE);

    DBMS_APPLICATION_INFO.SET_MODULE('','');

EXCEPTION
	WHEN OTHERS THEN
		ROLLBACK;
        DBMS_OUTPUT.PUT_LINE('sqlCode:'||SQLCODE||' / sqlerrm:'||SQLERRM);
        SP_DA_STAT_MNG(v_instance_nm, v_stat_nm, '02', V_TRT_CNT, 'sqlCode:'||SQLCODE||' / sqlerrm:'||SQLERRM, V_TOTZ_DATE, V_PART_CD, V_SYSDATE);

		DBMS_APPLICATION_INFO.SET_MODULE('','');
END SP_DA_SEGMENTS;


PROCEDURE SP_DA_TAB_MODIF(P_CLCT_DY IN VARCHAR2 default TO_CHAR(SYSDATE -1, 'YYYYMMDD') )
IS
    V_NAME              CONSTANT VARCHAR2(100)  := 'SP_DA_TAB_MODIF';

    v_TOTZ_DATE         VARCHAR2(8) := TO_CHAR(SYSDATE, 'YYYYMMDD');
    v_PART_CD           VARCHAR2(8) := TO_CHAR(SYSDATE, 'DD');
    V_SYSDATE           DATE := SYSDATE;
    V_TRT_CNT           NUMBER := 0;

    v_instance_nm varchar2(100);
    v_db_id     number;

    v_stat_nm varchar2(64) := 'DA_TAB_MODIF';

BEGIN

    DBMS_APPLICATION_INFO.SET_MODULE(V_NAME,'start');

    Select name
    Into v_instance_nm
    From SYS.GV_$DATABASE where rownum = 1;

    Select db_id
    Into v_db_id
    From DAUSER.DA_DB_LIST@PMETA where db_nm = v_instance_nm;

    IF (P_CLCT_DY is not null) THEN
        v_TOTZ_DATE := P_CLCT_DY;
    END IF;

    EXECUTE IMMEDIATE 'DELETE FROM DAUSER.DA_TAB_MODIF';
    DELETE DAUSER.DA_TAB_MODIF@PMETA WHERE db_id = v_db_id AND CLCT_DY = TO_CHAR(to_date(P_CLCT_DY, 'YYYYMMDD') + 1, 'YYYYMMDD');

    COMMIT;

    INSERT INTO DAUSER.DA_TAB_MODIF
    SELECT
        OWNER, TABLE_NAME, INSERTS,UPDATES,DELETES,  TRUNCATED, DROP_SEGMENTS
        , NVL(DECODE(TRUNCATED, 'YES', INSERTS, T_INSERTS - INSERTS), 0) AS INSERT_OCCR_CNT
        , NVL(DECODE(TRUNCATED, 'YES', UPDATES, T_UPDATES - UPDATES), 0) AS UPDATE_OCCR_CNT
        , NVL(DECODE(TRUNCATED, 'YES', DELETES, T_DELETES - DELETES), 0) AS DELETE_OCCR_CNT

    FROM (
        SELECT /*+ */
            LOG_DT, TABLE_OWNER OWNER, TABLE_NAME, INSERTS,UPDATES,DELETES, TRUNCATED, DROP_SEGMENTS
        , LEAD (INSERTS) OVER(partition by table_owner, table_name ORDER BY LOG_DT) T_INSERTS
        , LEAD (UPDATES) OVER(partition by table_owner, table_name ORDER BY LOG_DT) T_UPDATES
        , LEAD (DELETES) OVER(partition by table_owner, table_name ORDER BY LOG_DT) T_DELETES
        FROM SKCPDBA.OMDB_TAB_MODIFICATIONS A
        WHERE 1=1
        AND LOG_DT IN (P_CLCT_DY, TO_CHAR(to_date(P_CLCT_DY, 'YYYYMMDD') + 1, 'YYYYMMDD'))
        AND PARTITION_NAME IS NULL
        AND TABLE_OWNER IN (SELECT /*+ RULE */ USERNAME FROM DBA_USERS USERS
                        WHERE ACCOUNT_STATUS = 'OPEN'
                        AND INITIAL_RSRC_CONSUMER_GROUP NOT IN ('SYS_GROUP')
                        AND USERNAME NOT IN ('OUTLN','DBSNMP','EXFSYS', 'SKCPDBA', 'ZENIUSDB', 'GGT', 'GGS', 'GGSC', 'IGGS' , 'DBADMIN', 'ORANGE', 'SYSMAN')
                        AND USERNAME NOT LIKE 'DEV_%')
        AND NOT REGEXP_LIKE( nvl(TABLE_NAME, '-' ), 'BACK\$|BAK\$|BIN\$|TEMP\$|TMP\$|RN\$|TEST\$', 'i' )
    )
    WHERE 1=1
    AND LOG_DT = P_CLCT_DY
    AND T_INSERTS IS NOT NULL
    ;

    Insert into DAUSER.DA_TAB_MODIF@PMETA
    SELECT
        TO_CHAR(to_date(P_CLCT_DY, 'YYYYMMDD') + 1, 'YYYYMMDD') CLCT_DY
        , v_db_id DB_ID
        , OWNER, TABLE_NAME, INSERTS,UPDATES,DELETES,  TRUNCATED, DROP_SEGMENTS
        , INSERT_OCCR_CNT, UPDATE_OCCR_CNT, DELETE_OCCR_CNT
    FROM DAUSER.DA_TAB_MODIF;

    V_TRT_CNT := SQL%ROWCOUNT;
    COMMIT;

    SP_DA_STAT_MNG(v_instance_nm, v_stat_nm, '01', V_TRT_CNT, 'sqlCode:'||SQLCODE||' / sqlerrm:'||SQLERRM, V_TOTZ_DATE, V_PART_CD, V_SYSDATE);

    DBMS_APPLICATION_INFO.SET_MODULE('','');

EXCEPTION
	WHEN OTHERS THEN
		ROLLBACK;
        DBMS_OUTPUT.PUT_LINE('sqlCode:'||SQLCODE||' / sqlerrm:'||SQLERRM);
        SP_DA_STAT_MNG(v_instance_nm, v_stat_nm, '02', V_TRT_CNT, 'sqlCode:'||SQLCODE||' / sqlerrm:'||SQLERRM, V_TOTZ_DATE, V_PART_CD, V_SYSDATE);

		DBMS_APPLICATION_INFO.SET_MODULE('','');
END SP_DA_TAB_MODIF;

PROCEDURE SP_DA_AWR_SQLSTAT
IS
    V_NAME              CONSTANT VARCHAR2(100)  := 'SP_DA_AWR_SQLSTAT';

    v_TOTZ_DATE         VARCHAR2(8) := TO_CHAR(SYSDATE, 'YYYYMMDD');
    v_PART_CD           VARCHAR2(8) := TO_CHAR(SYSDATE, 'DD');
    V_SYSDATE           DATE := SYSDATE;
    V_TRT_CNT           NUMBER := 0;

    v_instance_nm   VARCHAR2(100);
    V_DB_ID         NUMBER;

    V_STAT_NM VARCHAR2(64) := 'DA_AWR_SQLSTAT';

    V_LST_SNAP_ID   NUMBER;

BEGIN

    DBMS_APPLICATION_INFO.SET_MODULE(V_NAME, 'START');

    Select name
    Into v_instance_nm
    From SYS.GV_$DATABASE where rownum = 1;

    Select db_id
    Into v_db_id
    From DAUSER.DA_DB_LIST@PMETA where db_nm = v_instance_nm;

    SELECT /*+ INDEX(X IX3_DA_AWR_SQLSTAT) */
        NVL(MAX(SNAP_ID), 0) lst_snap_id
        INTO V_LST_SNAP_ID
    FROM DA_AWR_SQLSTAT@PMETA x
    WHERE DB_ID = 1
    ;

    INSERT
    INTO DA_AWR_SQLSTAT@PMETA (
        DB_ID,
        SNAP_ID,
        SNAP_DT,
        INSTANCE_NUMBER,
        SQL_ID,
        --SQL_TEXT_1000,
        --SQL_NAME,
        PLAN_HASH_VALUE,
        LOADED_VERSIONS,
        VERSION_COUNT,
        MODULE,
        PARSING_SCHEMA_NAME,
        EXECUTIONS_TOTAL,
        EXECUTIONS_DELTA,
        LOADS_TOTAL,
        LOADS_DELTA,
        INVALIDATIONS_TOTAL,
        INVALIDATIONS_DELTA,
        BUFFER_GETS_TOTAL,
        BUFFER_GETS_DELTA,
        CPU_TIME_TOTAL,
        CPU_TIME_DELTA,
        ELAPSED_TIME_TOTAL,
        ELAPSED_TIME_DELTA
    )
    SELECT V_DB_ID DB_ID    ,
            SNAP_ID,
            ( SELECT END_INTERVAL_TIME FROM DBA_HIST_SNAPSHOT B WHERE B.SNAP_ID = A.SNAP_ID AND B.INSTANCE_NUMBER = A.INSTANCE_NUMBER ) SNAP_DT ,
            INSTANCE_NUMBER,
            SQL_ID,
           -- ( SELECT SUBSTR(SQL_TEXT, 1, 1000) FROM DBA_HIST_SQLTEXT B WHERE B.SQL_ID = A.SQL_ID AND B.DBID = A.DBID ) SQL_TEXT_1000 ,
           -- SQL_NAME,
           PLAN_HASH_VALUE,
           LOADED_VERSIONS,
           VERSION_COUNT,
           MODULE,
           PARSING_SCHEMA_NAME,
           EXECUTIONS_TOTAL,
           EXECUTIONS_DELTA,
           LOADS_TOTAL,
           LOADS_DELTA,
           INVALIDATIONS_TOTAL,
           INVALIDATIONS_DELTA,
           BUFFER_GETS_TOTAL,
           BUFFER_GETS_DELTA,
           CPU_TIME_TOTAL,
           CPU_TIME_DELTA,
           ELAPSED_TIME_TOTAL,
           ELAPSED_TIME_DELTA
      FROM DBA_HIST_SQLSTAT A
      WHERE SNAP_ID > V_LST_SNAP_ID
    ;

    V_TRT_CNT := SQL%ROWCOUNT;
    COMMIT;

    SP_DA_STAT_MNG(v_instance_nm, v_stat_nm, '01', V_TRT_CNT, 'sqlCode:'||SQLCODE||' / sqlerrm:'||SQLERRM, V_TOTZ_DATE, V_PART_CD, V_SYSDATE);

    DBMS_APPLICATION_INFO.SET_MODULE('','');

EXCEPTION
	WHEN OTHERS THEN
		ROLLBACK;
        DBMS_OUTPUT.PUT_LINE('SQLCODE:'||SQLCODE||' / SQLERRM:'||SQLERRM);
        SP_DA_STAT_MNG(v_instance_nm, v_stat_nm, '02', V_TRT_CNT, 'sqlCode:'||SQLCODE||' / sqlerrm:'||SQLERRM, V_TOTZ_DATE, V_PART_CD, V_SYSDATE);

		DBMS_APPLICATION_INFO.SET_MODULE('','');
END SP_DA_AWR_SQLSTAT ;

END PKG_DA_UTIL;
/